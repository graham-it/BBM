CHRGET Boot v1.1
================

Copyright (c) 2025 Graham (eng. Francesco Gramignani)
https://graham-it.itch.io
https://github.com/graham-it
https://csdb.dk/scener/?id=40810

CHRGET Boot uses an undocumented (and probably never released) exploit into
LOAD command routine of KERNAL ROM, to auto-execute a program file through
CHRGET, EAL pointer and screen RAM manipulation.

CHRGET Boot can be applied to a program that resides on BASIC text RAM, it
could be a complete BASIC program or a simple BASIC stub normally used to
launch M/L code, concatenated in the same file.

To convert an existing program to an auto-executable file, CHRGET Boot Header
is applied on top of it, removing the first two bytes indicating the original
load address.

A generated auto-executable program then must be loaded with the following
command: LOAD"filename",8,1

Where '8' is the device address, that could be any available, and '1'
indicates that the file will be loaded on its own address memory, not
BASIC relocated.

Load address: $002b (TXTTAB)	Pointer to the Start of BASIC Program Text
Header length (overhead):	214 bytes (zero page: 133, screen RAM: 81)

Note:
old load address ($0801) is replaced with TXTTAB pointer ($002b).

During LOAD process some crucial locations are overwritten:
- TXTTAB ($2b/2c) is forced to $0801 Pointer to the Start of BASIC Program Text
  (This is not strictly required, but was added for robustness and consistency)

- Following BASIC pointers must be specified to allow a BASIC program to work
  properly, otherwise new variables created could overwrite the program itself:

  VARTAB ($2d/2e) Pointer to the Start of the BASIC Variable Storage Area
  ARYTAB ($2f/30) Pointer to the Start of the BASIC Array Storage Area
  STREND ($31/32) Pointer to End of the BASIC Array Storage Area (+1)

  This three pointers must contain the (same) address of the end of the
  program in memory.
  Normally VARTAB ($2d/2e) is updated by the LOAD command routine, before
  returning to the BASIC prompt. Then, after a RUN, the CLR routine duplicates
  the same value to the other two pointers.

  Note:
  This is not required in case of a BASIC stub used to launch a pure M/L code
  program, that do not uses BASIC pointers.

- CHRGET Subroutine: Get Next BASIC Text Character (24 bytes, starting from $73)
  TXTPTR ($7a/7b) is forced to $0800 (an arbitrary but familiar value)

  Note:
  In direct mode, after the user enters the LOAD command, TXTPTR assumes
  the value of $0200 that points to BUF the BASIC Line Editor Input Buffer.
  A value different from $02 in the hi-byte part of TXTPTR ($7b) simulates
  the RUN mode.
  That value triggers the autorun at the end of the LOAD process!

- MSGFLG ($9d) is forced to $00 (no messages) Flag: Kernal Message Control
  (default value: $80 = control messages on, as in direct mode)

- TIME ($a0): the Software Jiffy Clock will be reset to zero (unavoidable!)

- EAL pointer ($ae/af) is forced $7af, so the next bytes are loaded into
  Video Screen Memory Area, starting from $07b0 (in the middle of the second
  last screen row).
  This thing is being exploited to display a message on the last line of the
  screen to inform the user that the booting process has taken place.

- Then the actual program is loaded into its original location, in the BASIC
  area ($0801).

At the end of loading process, done by Kernal LOAD routine ($f49e), the BASIC
LOAD command ($e168) checks the value of TXTPTR+1:
	$02 = direct mode
	any other = RUN mode

The value of $08, specified into the boot header, forces BASIC to restart the
BASIC program already in memory.
Then TXTPTR is set according to TXTTAB ($2b/2c) the Pointer to the Start of
BASIC Program Text.
Finally the loaded BASIC program is executed from start, without the need
to type RUN.

Final note:
Boot message may have different behaviour depending on Kernal revision:
	rev1: text displayed in white color
	rev2: not visible due to foreground color same as background
	rev3: regular appearance

August 30, 2025
Graham